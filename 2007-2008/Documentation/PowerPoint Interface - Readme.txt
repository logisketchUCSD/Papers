============================================
A Sketch Based Interface - PowerPoint Add-In
============================================


Introduction:
-------------

   This interface is written in C#, with access to PowerPoint COM Add-Ins library of functions and the Tablet PC SDK. The interface is initialized by clicking on a button located on the PowerPoint toolbar. This brings up a large transparent form with an ink overlay, a button toolbar above that, and a small corner form at the lower right corner of the screen. The transparent form with an ink overlay is the main interface where the user can use sketches and gestures to create the PowerPoint presentation. The button toolbar contains several useful buttons for control actions such as toggling modes; it also contain an informative feedback box and a help menu. The corner form hides in the corner, and if it detects a mousemove event, it toggles the overlay. 

Code Installation:
------------------
The development environment used was Visual Studio 2005. The code requires some "Interop" libraries -- the library Microsoft.Office.Interop.PowerPoint.dll must be in the folder where the code is stored and may need to be manually included. You may receive errors if you have  installed the "Office PIA (primary interop assemblies)" on the computer you are attempting to build with.

Add-in Installation:
-------------------
The "Basic" Solution has two Projects, Basic and BasicSetup -- the latter is for installation of the add-in.

First Use:
To install the add-in to the PowerPoint program on your computer, open up Basic.sln in the development environment and build the "Basic" project. Then, build BasicSetup. Then, right-click on BasicSetup and choose Install. A wizard will guild you through installation -- the location of where you install it to is not important. Once it is installed, it will run whenever you open PowerPoint.

In General :
Once the add-in is installed, you can basically ignore BasicSetup; building Basic will cause the installed add-in to be properly updated. Note that PowerPoint must be closed before Basic will successfully build.


BasicForm.cs:
-------------

   The main control of our overlay. Once the activation button is clicked, this main form appears over the slide. The most important feature of this form is the ink overlay, which enables the user to sketch and gesture directly on it. Using information collected by the Tablet PC SDK, we were able to obtain useful information about the gestures and strokes to carry out various actions such as adding shapes and recognizing text.


BasicForm.Gestures.cs:
----------------------

   This is a partial class of BasicForm and contains some useful methods organized into regions: Recognize, Delete, Copy/Cut/Paste, Misc, Textbox Manipulation, Alternative Recognition Result, and Stack.


BasicForm.Helpers.cs:
---------------------

   This is another partial class of BasicForm, containing miscellaneous support methods.


ButtonForm.cs:
--------------

   This controls the button toolbar that pops up above the main form when the activation button is clicked. It contains several important buttons: Overlay toggle, gesture toggle, undo, redo, and help. Each of the first four buttons control actions that we don't want the users to accidentally trigger with a gesture, so button provides a more reliable way to trigger them. The last button, help, brings up a menu of gestures and their corresponding actions, as well as a short instruction on how to do gestures. The button form also contains a feedback box that provides some feedback when users use the main basic form.


Connect.cs:
-----------

   This class is the most confusing one, as a lot of it is automatically generated by visual studio when we chose to create a PowerPoint add-in. This file is the one that connects the add-in to PowerPoint. It controls when the add-in is loaded, how it is displayed to the user, when it should be unloaded, etc.


CornerForm.cs:

--------------
   This form is used for quick toggling of the overlay's transparency a la the hot corners of a Mac. It has an inkOverlay with a mouseMove listener which toggles the transparency via directly toggling the background color (calls no external method). It is created in Connect with the 


PPTcontrol.cs:

--------------
   This class is the one (other than connect) that interacts most closely with PowerPoint. It initializes pptApp and pptPres which gets the current PowerPoint application and PowerPoint presentation for us to work with. It also contain slide manipulation and other methods that directly controls what goes into PowerPoint from our interface


ShapeAttributes.cs
------------------

   A simple class that creates a new object, ShapeAttributes, that stores important information about a PowerPoint autoshape such as type, name, position, size, etc. The constructor of a ShapeAttributes object takes in a PowerPoint Shape object and extracts those needed information from that shape. This resulting object is then used for undo / redo stack and recreate / find the desired objects. This class is very important to retain those shape attributes even after the corresponding shape on the slide has been modified or even deleted.


How to Use and Modify:
----------------------

   This interface can only be used when it is properly installed on PowerPoint, after which the user can bring up the interface by clicking on the activation button.
   To assign and use new gestures: modify the bo_gesture method under BasicForm class by find the desired gesture in the switch statement under that method. Then add in the feature you want to be associated with that gesture
   To add new controls (button, panel, combo boxes, etc), use Visual Studio's form editor, which can be started by double clicking basicform, cornerform, or buttonform. You may have to show the Toolbox panel. Once a control has been added, double-clicking it will generate a method stub "attached" to it.
   To add new form, as we added buttonform and cornerform to basicform, be sure to connect that new form with the existing ones by creating a new data member in connect and link the forms together upon initialization. This ensures that what goes on in one form is recognized by the others and the others have access to the internal or public methods in the linked class.
   To turn off the pop-up messages notifying you of exceptions, modify the debugExceptionMessage class, which displays those exceptions. Do this with caution! It's probably a better idea to change the code in the "try" block so it properly handles the exceptional case that keeps popping up, but you knew that already.